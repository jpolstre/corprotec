// Generated by CoffeeScript 1.7.1
(function() {
  var AuxObjAttribs, ShoppingCart, formHtmlEditarItem, htmlCliente, item, msgCarritoJq, numItemsJq, tablaVentas, _i, _len;

  tablaVentas = void 0;

  numItemsJq = $('span#num-items');

  msgCarritoJq = $('div#msg-carrito');

  AuxObjAttribs = ['serie', 'codigo', 'descripcion', 'cantidad', 'precio_recibo', 'precio_factura', 'subtotal'];

  htmlCliente = '<form class="form-horizontal">';

  htmlCliente += "<div class='form-group'> <label for='proveedor' class='col-md-3  control-label'>Proveedor:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='proveedor' name='proveedor' validar='requiere'> </div> </div>";

  htmlCliente += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  formHtmlEditarItem = '<form class="form-horizontal">';

  for (_i = 0, _len = AuxObjAttribs.length; _i < _len; _i++) {
    item = AuxObjAttribs[_i];
    if (item !== 'subtotal') {
      formHtmlEditarItem += "<div class='form-group'> <label for='" + item + "' class='col-md-3  control-label'>" + item + ":</label> <div class='col-md-7'> <input type='text' class='form-control upper' id='" + item + "' name='" + item + "' validar='requiere'> </div> </div>";
    }
  }

  formHtmlEditarItem += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  ShoppingCart = (function() {
    function ShoppingCart() {}

    ShoppingCart.prototype.tipoPrecio = 'recibo';

    ShoppingCart.prototype.numRows = 0;

    ShoppingCart.prototype.numItems = 0;

    ShoppingCart.prototype.itemsInCart = {};

    ShoppingCart.prototype.objAttribs = AuxObjAttribs;

    ShoppingCart.prototype.html = "<table class='table table-striped table-bordered table-hover' style='display:none;' id='carrito-compra'> <thead> <tr> <th>Serie</th> <th>Codigo</th> <th>Descripcion</th> <th>Cantidad</th> <th>precio_recibo</th> <th>precio_factura</th> <th>Subtotal</th> <th>Opciones</th> </tr> </thead><tbody></tbody><tfoot><tr><td colspan='6'>TOTAL</td><td colspan='2' id='tolal'></td></tr><tr><td colspan='8' style='text-align:center;'><button class='btn btn-danger'>Cancelar</button> <button class='btn btn-success'>Vender</button></td></tr></tfoot></table>";

    ShoppingCart.prototype.addTo = function(elJq) {
      var scope;
      scope = this;
      this.jq = $(this.html).appendTo(elJq);
      this.tBodyJq = $('tbody', this.jq);
      this.totalJq = $('td#tolal', this.jq);
      this.tBodyJq.on('click', 'button', function(e) {
        if ($(this).attr('alt') === 'eliminar') {
          return scope.delRow($(this).parent().parent());
        } else {
          return scope.editRow($(this).parent().parent());
        }
      });
      return $('tfoot', this.jq).on('click', 'button', function(e) {
        if ($(this).attr('class') === 'btn btn-danger') {
          return scope.cancelShopp();
        } else {
          return scope.shopp();
        }
      });
    };

    ShoppingCart.prototype.shopp = function() {
      var modalCliente;
      modalCliente = new Modal({
        titulo: 'Cliente',
        tipo: 'formulario',
        contenido: htmlCliente,
        despuesDeMostrar: function(ModalJq) {
          return setTimeout(function() {
            return ModalJq.find('input:text:first').focus();
          }, 500);
        },
        antesDeMostrar: function(ModalJq) {
          return ModalJq.find('div.modal-footer button:first').text('ok');
        }
      });
      return new Validador({
        formulario: modalCliente.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formJq) {
            return modalCliente.cerrar(function() {
              var cliente, _j, _len1, _ref;
              cliente = formJq.find('input:text').val();
              _ref = _this.itemsInCart;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                item = _ref[_j];
                item.proveedor = proveedor;
              }
              return io.emit('ventas:shopp', {
                cliente: cliente,
                tipoVenta: _this.tipoPrecio,
                userAction: globalUser
              });
            });
          };
        })(this)
      });
    };

    ShoppingCart.prototype.restar = function() {
      this.itemsInCart = {};
      this.numRows = 0;
      this.numItems = 0;
      numItemsJq.text(this.numItems);
      this.tBodyJq.html('');
      this.jq.hide();
      return msgCarritoJq.show();
    };

    ShoppingCart.prototype.cancelShopp = function() {
      var modalConfirm;
      return modalConfirm = new Modal({
        titulo: 'Confirmar - Cancelar Compra',
        tipo: 'confirmacion',
        contenido: "<p>Realmente desea cancelar esta compra?</p>",
        accionSi: (function(_this) {
          return function() {
            return modalConfirm.cerrar(function() {
              _this.itemsInCart = {};
              _this.numRows = 0;
              _this.numItems = 0;
              numItemsJq.text(_this.numItems);
              _this.tBodyJq.html('');
              _this.jq.fadeOut('fast', function() {
                return msgCarritoJq.fadeIn('fast');
              });
              return io.emit('ventas:cancelShopp', {
                userAction: globalUser
              });
            });
          };
        })(this),
        antesDeMostrar: function(jqModal) {
          var btnsi;
          btnsi = jqModal.find('button.btn-danger').text('SI');
          return jqModal.find('button:last').text('NO').click(function(e) {
            return modalConfirm.cerrar();
          });
        }
      });
    };

    ShoppingCart.prototype.sumColumn = function(index) {
      var sum;
      sum = 0;
      this.tBodyJq.find('tr').each(function(i) {
        var valTd;
        valTd = $(this).find("td:eq(" + index + ")").text() * 1;
        return sum += valTd;
      });
      return sum;
    };

    ShoppingCart.prototype.calcSubtotal = function() {
      var index, sum;
      index = tipo === 'recibo' ? 4 : 5;
      sum = 0;
      this.tBodyJq.find('tr').each(function(i) {
        var cantidad, subTotali, valTd;
        cantidad = $(this).find("td:eq(" + 3 + ")").text() * 1;
        valTd = $(this).find("td:eq(" + index + ")").text() * 1;
        subTotali = parseFloat(cantidad * valTd).toFixed(2);
        $(this).find("td:eq(" + 6 + ")").text(subTotali);
        return sum += subTotali * 1;
      });
      return this.totalJq.text(parseFloat(sum).toFixed(2));
    };

    ShoppingCart.prototype.editRow = function(trJq) {
      var dtsJq, modalEditar;
      dtsJq = trJq.find('td');
      modalEditar = new Modal({
        titulo: 'Editar - Item (Compra)',
        tipo: 'formulario',
        contenido: formHtmlEditarItem,
        despuesDeMostrar: function(modalJq) {
          var elJq, elTdVal, i, _j, _len1;
          for (i = _j = 0, _len1 = AuxObjAttribs.length; _j < _len1; i = ++_j) {
            item = AuxObjAttribs[i];
            if (!(item !== 'subtotal')) {
              continue;
            }
            elTdVal = $(dtsJq[i]).text();
            elJq = $("input#" + item, modalJq);
            elJq.val(elTdVal);
            if (elTdVal === '----------') {
              elJq.attr('disabled', 'disabled');
            }
          }
          return setTimeout(function() {
            return modalJq.find('input:text:first').select();
          }, 500);
        },
        antesDeMostrar: function(modalJq) {
          return modalJq.find('div.modal-footer button:first').text('ok');
        }
      });
      return new Validador({
        formulario: modalEditar.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formJq) {
            var cantidad, seriesArr, seriesJq;
            cantidad = $('input#cantidad', formJq).val();
            seriesJq = $('input#series', formJq);
            seriesArr = seriesJq.val().split(',');
            if (cantidad * 1 === seriesArr.length * 1 || seriesJq.val() === '----------') {
              return modalEditar.cerrar(function() {
                var elTdJq, elVal, i, _j, _len1;
                for (i = _j = 0, _len1 = AuxObjAttribs.length; _j < _len1; i = ++_j) {
                  item = AuxObjAttribs[i];
                  elTdJq = $(dtsJq[i]);
                  elVal = $("input#" + item, formJq).val();
                  elTdJq.text(elVal);
                  if (item === 'subtotal') {
                    elTdJq.text($(dtsJq[3]).text() * 1 * $(dtsJq[4]).text());
                  }
                }
                _this.totalJq.text(parseFloat(_this.sumColumn(6)).toFixed(2));
                _this.numItems = _this.sumColumn(3);
                return numItemsJq.text(_this.numItems);
              });
            } else {
              return new Alerta({
                tipo: 'error',
                titulo: 'Error',
                texto: "debe escribir " + cantidad + " serie(s)",
                posicion: 'arriba-izquierda'
              });
            }
          };
        })(this)
      });
    };

    ShoppingCart.prototype.addRow = function(rowObj) {
      var addItem, cantidad, cantidadJq, precio, trJq;
      addItem = (function(_this) {
        return function() {
          var attr, htmlRow, precio, _j, _len1, _ref;
          _this.numRows++;
          _this.numItems += rowObj.cantidad * 1;
          numItemsJq.text(_this.numItems);
          precio = _this.tipoPrecio === 'recibo' ? rowObj.precio_recibo : rowObj.precio_factura;
          rowObj.subtotal = parseFloat(rowObj.cantidad * 1 * precio).toFixed(2);
          htmlRow = "<tr id=" + rowObj._id + ">";
          _ref = _this.objAttribs;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            attr = _ref[_j];
            htmlRow += "<td>" + rowObj[attr] + "</td>";
          }
          htmlRow += '<td><button type="button" class="btn btn-danger btn-circle" alt="eliminar"><i class="fa fa-times"></i></button> <button type="button" class="btn btn-info btn-circle" alt="editar"><i class="fa fa-pencil"></i></button></td>';
          htmlRow += '</tr>';
          $(htmlRow).appendTo(_this.tBodyJq);
          _this.totalJq.text(parseFloat(_this.sumColumn(6)).toFixed(2));
          if (_this.numRows === 1) {
            msgCarritoJq.hide();
            _this.jq.show();
          }
          delete rowObj.subtotal;
          return _this.itemsInCart[rowObj._id] = rowObj;
        };
      })(this);
      if (rowObj.serie === '----------') {
        item = this.itemsInCart[rowObj._id];
        if (item !== void 0) {
          this.numItems += rowObj.cantidad * 1;
          numItemsJq.text(this.numItems);
          trJq = $("tr#" + item._id, this.tBodyJq);
          cantidadJq = trJq.find('td:eq(3)');
          cantidadJq.text(cantidadJq.text() * 1 + rowObj.cantidad * 1);
          precio = this.tipoPrecio === 'recibo' ? item.precio_recibo : item.precio_factura;
          cantidad = cantidadJq.text();
          trJq.find('td:eq(6)').text(parseFloat(cantidad * 1 * precio).toFixed(2));
          this.totalJq.text(parseFloat(this.sumColumn(6)).toFixed(2));
          return item.cantidad = cantidad * 1;
        } else {
          return addItem();
        }
      } else {
        return addItem();
      }
    };

    ShoppingCart.prototype.delRow = function(rowJq) {
      var cantidad, id;
      cantidad = rowJq.find('td:eq(3)').text();
      this.numRows--;
      this.numItems -= cantidad * 1;
      numItemsJq.text(this.numItems);
      rowJq.fadeOut('medium', (function(_this) {
        return function() {
          rowJq.remove();
          if (_this.numRows === 0) {
            _this.jq.hide();
            return msgCarritoJq.show();
          }
        };
      })(this));
      id = rowJq.attr('id');
      console.log(item);
      delete this.itemsInCart[id];
      return io.emit('ventas:delToCart', {
        id: id,
        userAction: globalUser
      });
    };

    ShoppingCart.prototype.serialize = function(proveedor) {
      var gthis, resultArr;
      resultArr = [];
      gthis = this;
      this.tBodyJq.find('tr').each(function(i) {
        var attr, inx, objEl, tds, _j, _len1, _ref;
        tds = $(this).find('td');
        objEl = {};
        _ref = gthis.objAttribs;
        for (inx = _j = 0, _len1 = _ref.length; _j < _len1; inx = ++_j) {
          attr = _ref[inx];
          if (attr !== 'subtotal') {
            objEl[attr] = $(tds[inx]).text();
          }
        }
        objEl.proveedor = proveedor;
        return resultArr.push(objEl);
      });
      return resultArr;
    };

    return ShoppingCart;

  })();

  $(document).ready(function() {
    var actualNum, carouselItem, contTablaVentJq, htmlCantdad, inputSearchJq, itemElegido, rowTable, shoppingCart, showHideMenujq, tablaVentasJq;
    console.log(window.location);
    io.on('ventas:addToCart', function(data) {
      tablaVentas.ajax.reload();
      if (data.userAction === globalUser) {
        shoppingCart.addRow(data.item);
        inputSearchJq.val('').trigger('keyup').focus();
        return new Alerta(data.msg);
      }
    });
    io.on('ventas:delToCart', function(data) {
      return tablaVentas.ajax.reload();
    });
    io.on('ventas:cancelShopp', function(data) {
      return tablaVentas.ajax.reload();
    });
    io.on('ventas:shopp', function(data) {
      tablaVentas.ajax.reload();
      if (data.userAction === globalUser) {
        shoppingCart.restar();
        return new Alerta(data.msg);
      }
    });
    tablaVentasJq = $('#productos-registrados');
    contTablaVentJq = tablaVentasJq.parent();
    tablaVentas = tablaVentasJq.DataTable({
      "dom": '<"top"fl>t<"bottom"pi><"clear">',
      "language": {
        "search": "Buscar: ",
        "lengthMenu": "",
        "lengthMenu": "_MENU_",
        "zeroRecords": "Ningun registro encontrado",
        "info": "pagina _PAGE_ de _PAGES_",
        "infoEmpty": "Ningun Registro",
        "infoFiltered": "(fitrado de _MAX_ total registros)"
      },
      "ajax": '/productos/getAll',
      "columns": [
        {
          "data": "_id"
        }, {
          "data": "fecha"
        }, {
          "data": "serie"
        }, {
          "data": "codigo"
        }, {
          "data": "descripcion"
        }, {
          "data": "costo"
        }, {
          "data": "cantidad"
        }, {
          "data": "utilidad"
        }, {
          "data": "garantia"
        }, {
          "data": "proveedor"
        }, {
          "data": "precio_recibo"
        }, {
          "data": "precio_factura"
        }
      ],
      "columnDefs": [
        {
          "visible": false,
          "targets": 0
        }, {
          "targets": 1,
          "visible": true,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).text(moment(cellData).format("DD-MM-YYYY H:mm:ss"));
          }
        }, {
          "visible": true,
          "targets": 2
        }, {
          "targets": 3,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).addClass('selectable-td').html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "targets": 4,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).addClass('selectable-td').html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "visible": false,
          "targets": 5
        }, {
          "visible": true,
          "targets": 6
        }, {
          "visible": false,
          "targets": 7
        }, {
          "visible": false,
          "targets": 8
        }, {
          "visible": false,
          "targets": 9
        }
      ],
      "order": [1, 'asc']
    });
    showHideMenujq = $('div.show-hide-colms');
    $(document).ajaxComplete(function(event, xhr, settings) {
      tablaVentasJq.css('width', '');
      return showHideMenujq.show();
    });
    $('ul.dropdown-cols input:checkbox').on('click', function(event) {
      var column;
      column = tablaVentas.column($(this).attr('data-column'));
      if ($(this).is(':checked')) {
        column.visible(true);
      } else {
        column.visible(false);
      }
      return tablaVentasJq.css('width', '');
    });
    actualNum = 0;
    carouselItem = $('div#item-compra').carousel({
      interval: false
    });
    $('ol.breadcrumb').on('click', 'a', function(evt) {
      var num;
      evt.preventDefault();
      num = $(this).attr('data-target') * 1;
      if (actualNum !== num) {
        carouselItem.carousel(num);
        return actualNum = num;
      }
    });
    carouselItem.on('slid.bs.carousel', function(e) {
      if (inputSearchJq.is(':visible')) {
        return inputSearchJq.focus();
      }
    });
    rowTable = {};
    itemElegido = {};
    htmlCantdad = "<form class='form-horizontal'> <div class='form-group'> <label for='cantidad' class='col-md-3  control-label'>Cantidad:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='cantidad' name='cantidad' placeholder='Cantidad a vender' validar='requiere'> </div> </div><input type='submit' style='width:0px;height:0px;margin:0;padding:0;border:none;'></form>";
    $('tbody', tablaVentasJq).on('click', 'a', function(evt) {
      var elTrNode, indexElegido, modalCantidad;
      evt.preventDefault();
      elTrNode = $(this).parents('tr')[0];
      indexElegido = tablaVentas.row(elTrNode).index();
      console.log('elindice elegido es: ' + indexElegido);
      console.log(tablaVentas.row(indexElegido));
      rowTable = tablaVentas.row(indexElegido);
      itemElegido = rowTable.data();
      if (itemElegido.cantidad * 1 > 1) {
        modalCantidad = new Modal({
          titulo: 'Cantidad A Vender',
          tipo: 'formulario',
          contenido: htmlCantdad,
          despuesDeMostrar: function(ModalJq) {
            return setTimeout(function() {
              return ModalJq.find('input:text:first').focus();
            }, 500);
          },
          antesDeMostrar: function(ModalJq) {
            return ModalJq.find('div.modal-footer button:first').text('ok');
          }
        });
        return new Validador({
          formulario: modalCantidad.jq.find('form:first'),
          procesarFormulario: (function(_this) {
            return function(fromJq) {
              var cantidad;
              cantidad = fromJq.find('input:text:first').val();
              if (cantidad * 1 > itemElegido.cantidad * 1) {
                return new Alerta({
                  tipo: 'error',
                  titulo: 'Error',
                  texto: "Solo se dispone de " + itemElegido.cantidad + " Productos de este tipo",
                  posicion: 'arriba-izquierda'
                });
              } else {
                return modalCantidad.cerrar(function() {
                  itemElegido.cantidad = cantidad * 1;
                  return io.emit('ventas:addToCart', {
                    item: itemElegido,
                    userAction: globalUser
                  });
                });
              }
            };
          })(this)
        });
      } else {
        return io.emit('ventas:addToCart', {
          item: itemElegido,
          userAction: globalUser
        });
      }
    });
    inputSearchJq = $('input.input-sm', contTablaVentJq);
    $('input.tipo_precio').on('change', function() {
      shoppingCart.tipoPrecio = $(this).val();
      if (shoppingCart.numRows > 0) {
        return shoppingCart.calcSubtotal();
      }
    });
    shoppingCart = new ShoppingCart();
    shoppingCart.addTo($('div.table-responsive:eq(1)'));
    return $(window).on('beforeunload', function(e) {
			io.emit('ventas:cancelShopp', {
				userAction: globalUser
			});
		});
  });

}).call(this);
