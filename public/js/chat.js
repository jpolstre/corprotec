// Generated by CoffeeScript 1.7.1
(function() {
  var Chat;

  Chat = (function() {
    function Chat(usersIn, inChat) {
      var comment, _i, _len;
      this.usersIn = usersIn;
      this.html = "<li> Conectados: <strong id='conectados'>" + this.usersIn + "</strong> </li> <li class='divider'></li>";
      for (_i = 0, _len = inChat.length; _i < _len; _i++) {
        comment = inChat[_i];
        this.html = "<li class='dropdown'> <a class='dropdown-toggle' data-toggle='dropdown' href='#'> <span class='top-label label label-warning'>" + this.usersIn + "</span>  <i class='fa fa-bell fa-3x'></i> </a> <!-- dropdown alerts--> <ul class='dropdown-menu dropdown-alerts'> <li> <a href='#'> <div> <i class='fa fa-comment fa-fw'></i>" + comment.user + " dice: <span class='pull-right text-muted small'>4 minutes ago</span> <p>" + comment.txt + "</p> </div> </a> </li> <li class='divider'></li> </ul> <!-- end dropdown-alerts --> </li>";
      }
      this.html = "<li> <form class='form-horizontal'> <input type='text'  class='form-control' name='texto'> </form> </li>";
    }

    Chat.prototype.addTo = function(jqEl) {
      this.jq = $(this.html).appendTo(jqEl);
      return this.conectadosJq = this.jq.find('strong#conectados');
    };

    Chat.prototype.updateUsersIn = function(usersObj) {
      var userObj, users, _i, _len;
      users = [];
      for (_i = 0, _len = usersObj.length; _i < _len; _i++) {
        userObj = usersObj[_i];
        users.push(userObj.name);
      }
      return this.conectadosJq.text(users);
    };

    return Chat;

  })();

  $(window).on('load', function() {
    var inChat;
    inChat = new Chat([], []);
    inChat.addTo($('#mi-chat'));
    io.emit('users:userIn', {
      userAction: globalUser
    });
    io.on('users:userIn', function(data) {
      return inChat.updateUsersIn(data.usersIn);
    });
    $(window).on('click', function() {
      var sw;
      return sw = 1;
    });
    return $(window).on('beforeunload', function(e){
			if(sw === 0){
				console.log(e);
			}
			sw = 0
			io.emit('users:userOut', {
				userAction: globalUser
			});
			return 'ooo'
		});
  });

}).call(this);
