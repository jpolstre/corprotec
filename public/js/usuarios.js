// Generated by CoffeeScript 1.7.1
(function() {
  var User, allUsers, formHtml, serializeForm;

  allUsers = {};

  serializeForm = function(formJq) {
    var data, pass, privilegios;
    data = {};
    formJq.find('input:text, select').each(function(i) {
      var elJq;
      elJq = $(this);
      return data[elJq.attr('name')] = elJq.val();
    });
    privilegios = [];
    formJq.find('div.privilegios input:checkbox').each(function(i) {
      var elJq;
      elJq = $(this);
      if (elJq.is(':checked')) {
        return privilegios.push(elJq.attr('name'));
      }
    });
    data.privilegios = privilegios;
    pass = formJq.find('#rewPass').val();
    if (pass !== '') {
      data.password = pass;
    }
    return data;
  };

  formHtml = function(opt) {
    var arrayPass, htmlForm, key, val;
    htmlForm = "<form class='form-horizontal'role='form'>";
    htmlForm += "<div class='form-group'> <label for='name' class='col-lg-3 control-label'>Nombre</label> <div class='col-lg-8'> <input type='text' autofocus class='form-control' id='name' name='name' validar='requiere'> </div> </div> <div class='form-group'> <label for='email' class='col-lg-3 control-label'>Email</label> <div class='col-lg-8'> <input type='text' class='form-control' id='email' name='email' validar='email'> </div> </div>";
    htmlForm += "<div class='form-group'> <label for='privilegios' class='col-lg-3 control-label'>Privilegios</label> <div class='col-lg-8'> <div id='blk-privilegio' class='privilegios' validar='especial'> <label class='checkbox'> <input type='checkbox' name='inicio'> Inicio </label> <label class='checkbox'> <input type='checkbox' name='compras'> Compras </label> <label class='checkbox'> <input type='checkbox' name='ventas'> Ventas </label> <label class='checkbox'> <input type='checkbox' name='usuarios'> Usuarios </label> </div> </div> </div>";
    htmlForm += "<div class='form-group'> <label for='estado' class='col-lg-3 control-label'>Estado</label> <div class='col-lg-8'> <select type='text' class='form-control' id='estado' name='estado' validar='requiere'> <option></option> <option>Habilitado</option> <option>Bloqueado</option> </select> </div> </div>";
    if (opt === 'edit') {
      htmlForm += "<div class='form-group chk'> <div class='col-lg-offset-2 col-lg-10'> <div class='checkbox'> <label> <input type='checkbox' name='chk'> Cambiar Password </label> </div> </div> </div>";
      htmlForm += "<div class='cnt-pass' style='display:none;'>";
    } else {
      htmlForm += "<div class='cnt-pass'>";
    }
    arrayPass = {
      newPass: 'Password',
      rewPass: 'Reescribir pass'
    };
    for (key in arrayPass) {
      val = arrayPass[key];
      htmlForm += "<div class='form-group'> <label for='" + key + "' class='col-lg-3 control-label'>" + val + "</label> <div class='col-lg-8'> <input type='password' class='form-control' id='" + key + "' name='" + key + "' validar='requiere" + (key === "rewPass" ? ",igual_a|newPass" : "") + "'> </div> </div>";
    }
    htmlForm += "</div></form>";
    return htmlForm;
  };

  User = (function() {
    function User(options) {
      this.options = options != null ? options : {};
      this.html = "<div class='col-lg-5' id='" + this.options._id + "' > <div class='panel panel-info'> <div class='panel-heading'> <i class='fa fa-user fa-2x'></i> <strong>" + this.options.name + "</strong> </div> <div class='panel-body'> <p><strong>Email: </strong>" + this.options.email + "</p> <p><strong>Privilegio: </strong>" + this.options.privilegios + "</p> <p><strong>Estado: </strong>" + this.options.estado + "</p> </div> <div class='panel-footer'> <div class='btn-group btn-group-sm'> <button type='button' class='btn btn-info'><i class='fa fa-pencil fa-fw'></i> Editar</button> <button type='button' class='btn btn-danger'><i class='fa fa-minus fa-fw'></i> Eliminar</button> </div> </div> </div> </div>";

      /*
      			<select type='text' class='form-control' id='#{key}' name='#{key}' validar='requiere'>
      				<option></option>
      				<option>Administrador</option>
      				<option>Empleado</option>
      			</select>
       */
    }

    User.prototype.addTo = function(jqElement) {
      this.jq = $(this.html).appendTo(jqElement);
      this.panelJq = $('div.panel', this.jq);
      $('button:first', this.jq).click((function(_this) {
        return function(e) {
          _this.panelJq.removeClass().addClass('panel panel-danger');
          return _this.edit();
        };
      })(this));
      return $('button:last', this.jq).click((function(_this) {
        return function(e) {
          _this.panelJq.removeClass().addClass('panel panel-danger');
          return _this["delete"]();
        };
      })(this));
    };

    User.prototype["delete"] = function() {
      var modConfirmar;
      return modConfirmar = new Modal({
        titulo: this.options.name === globalUser ? 'Eliminar - Usuario (<small>El sitema se reinicia</small>)' : 'Eliminar - Usuario',
        tipo: 'confirmacion',
        contenido: "Realmente desea eliminar este usuario?",
        accionSi: (function(_this) {
          return function() {
            return modConfirmar.cerrar(function() {
              return io.emit('users:delete', {
                id: _this.options._id,
                userDelete: _this.options.name,
                userAction: globalUser
              });
            });
          };
        })(this),
        despuesDeCerrar: (function(_this) {
          return function(mjq) {
            return _this.panelJq.removeClass().addClass('panel panel-info');
          };
        })(this)
      });
    };

    User.prototype.edit = function() {
      var editModal;
      editModal = new Modal({
        titulo: this.options.name === globalUser ? 'Editar - Usuario (<small>El sitema se reinicia</small>)' : 'Editar - Usuario',
        tipo: 'formulario',
        contenido: formHtml('edit'),
        antesDeMostrar: (function(_this) {
          return function(jq) {
            var ctnPassJq, key, privilegios, val, _ref;
            ctnPassJq = $('div.cnt-pass');
            $('div.chk input:checkbox', jq).click(function() {
              if ($(this).is(':checked')) {
                return ctnPassJq.show();
              } else {
                return ctnPassJq.hide();
              }
            });
            _ref = _this.options;
            for (key in _ref) {
              val = _ref[key];
              if (key !== '_id') {
                jq.find("input#" + key + ", select#" + key).val(val);
              }
            }
            privilegios = _this.options.privilegios;
            return jq.find('div#blk-privilegio input:checkbox').each(function(e) {
              var elChkJq;
              elChkJq = $(this);
              if (_.indexOf(privilegios, $.trim(elChkJq.attr('name'))) !== -1) {
                return elChkJq.trigger('click');
              }
            });
          };
        })(this),
        despuesDeCerrar: (function(_this) {
          return function(mjq) {
            return _this.panelJq.removeClass().addClass('panel panel-info');
          };
        })(this)
      });
      return new Validador({
        formulario: editModal.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formJq) {
            console.log(serializeForm(formJq));
            return editModal.cerrar(function() {
              return io.emit('users:edit', {
                id: _this.options._id,
                newData: serializeForm(formJq),
                userAction: globalUser,
                useredit: _this.options.name
              });
            });
          };
        })(this)
      });
    };

    User.prototype.updateHtml = function(newData) {
      var key, val;
      for (key in newData) {
        val = newData[key];
        if (this.options[key]) {
          this.options[key] = val;
        }
      }
      $('div.panel-heading strong', this.jq).text(this.options.name);
      return $('div.panel-body', this.jq).html("<p><strong>Email: </strong>" + this.options.email + "</p><p><strong>Privilegio: </strong>" + this.options.privilegios + "</p><p><strong>Estado: </strong>" + this.options.estado + "</p>");
    };

    return User;

  })();

  $(window).load(function() {
    var contentJq;
    contentJq = $('div.users-content');
    io.on('users:create', function(data) {
      var user;
      if (data.msg.tipo === 'exito') {
        user = new User(data.user);
        user.addTo(contentJq);
        allUsers[data.user._id] = user;
        console.log(data.userAction + '---' + globalUser);
        if (data.userAction !== globalUser) {
          data.msg.tipo = 'info';
          data.msg.titulo = 'Informacion';
          data.msg.texto = "El usuario <strong>" + data.userCreate + "</strong>a sido creado";
        }
        return new Alerta(data.msg);
      } else {
        if (data.userAction === globalUser) {
          return new Alerta(data.msg);
        }
      }
    });
    io.on('users:delete', function(data) {
      var el, msg;
      console.log(data);
      msg = data.msg;
      el = allUsers[data.id];
      el.jq.fadeOut('medium', function() {
        el.jq.remove();
        delete el;
        if (data.userAction !== globalUser) {
          msg.tipo = 'info';
          msg.titulo = 'Informacion';
          msg.texto = "!El usuario <strong>" + data.userDelete + "</strong> a sido eliminado.";
        }
        return new Alerta(msg);
      });
      if (data.userDelete === globalUser) {
        return setTimeout(function() {
          return window.location.replace('/');
        }, 2000);
      }
    });
    io.on('users:edit', function(data) {
      var user;
      user = allUsers[data.id];
      user.updateHtml(data.newData);
      if (data.userAction === globalUser) {
        new Alerta(data.msg);
      }
      if (data.useredit === globalUser) {
        data.msg.tipo = 'info';
        data.msg.titulo = 'Informacion';
        data.msg.texto = "!Tu cuenta a sido modificada el sistema se reiniciara.";
        new Alerta(data.msg);
        return setTimeout(function() {
          return window.location.replace('/');
        }, 2000);
      }
    });
    $('button#btn-addUser').on('click', function(e) {
      var addUserModal, val;
      addUserModal = new Modal({
        titulo: 'Nuevo - Usuario',
        tipo: 'formulario',
        contenido: formHtml('add'),
        despuesDeMostrar: function(jq) {
          return setTimeout(function() {
            return jq.find('input#name').focus();
          }, 800);
        }
      });
      return val = new Validador({
        formulario: addUserModal.jq.find('form'),
        procesarFormulario: function(jqForm) {
          return addUserModal.cerrar(function() {
            var dataUser;
            dataUser = serializeForm(jqForm);
            return io.emit('users:create', {
              usuario: dataUser,
              userAction: globalUser,
              userCreate: dataUser.name
            });
          });
        }
      });
    });
    return $.ajax({
      url: '/users/getAll',
      jsonp: "callback",
      dataType: 'jsonp',
      success: function(users) {
        var i, user, useri, _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = users.length; _i < _len; i = ++_i) {
          useri = users[i];
          user = new User(useri);
          user.addTo(contentJq);
          _results.push(allUsers[useri._id] = user);
        }
        return _results;
      }
    });
  });

}).call(this);
