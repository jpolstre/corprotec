// Generated by CoffeeScript 1.7.1
(function() {
  var AuxObjAttribs, ShoppingCart, formHtmlEditarItem, htmlProveedor, item, msgCarritoJq, numItemsJq, _i, _len;

  numItemsJq = $('span#num-items');

  msgCarritoJq = $('div#msg-carrito');

  AuxObjAttribs = ['series', 'codigo', 'descripcion', 'costo', 'cantidad', 'utilidad', 'garantia', 'subtotal'];

  htmlProveedor = '<form class="form-horizontal">';

  htmlProveedor += "<div class='form-group'> <label for='proveedor' class='col-md-3  control-label'>Proveedor:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='proveedor' name='proveedor' validar='requiere'> </div> </div>";

  htmlProveedor += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  formHtmlEditarItem = '<form class="form-horizontal">';

  for (_i = 0, _len = AuxObjAttribs.length; _i < _len; _i++) {
    item = AuxObjAttribs[_i];
    if (item !== 'subtotal') {
      formHtmlEditarItem += "<div class='form-group'> <label for='" + item + "' class='col-md-3  control-label'>" + item + ":</label> <div class='col-md-7'> <input type='text' class='form-control upper' id='" + item + "' name='" + item + "' validar='requiere'> </div> </div>";
    }
  }

  formHtmlEditarItem += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  ShoppingCart = (function() {
    function ShoppingCart() {}

    ShoppingCart.prototype.numRows = 0;

    ShoppingCart.prototype.numItems = 0;

    ShoppingCart.prototype.itemsInCart = [];

    ShoppingCart.prototype.objAttribs = AuxObjAttribs;

    ShoppingCart.prototype.html = '<table class="table table-striped table-bordered table-hover" style="display:none;" id="carrito-compra"> <thead> <tr> <th>Serie(s)</th> <th>Codigo</th> <th>Descripcion</th> <th>Costo</th> <th>Cantidad</th> <th>Utilidad</th> <th>Garantia</th> <th>Subtotal</th> <th>Opciones</th> </tr> </thead><tbody></tbody><tfoot><tr><td colspan="7">TOTAL</td><td colspan="2" id="tolal"></td></tr><tr><td colspan="9" style="text-align:center;"><button class="btn btn-danger">Cancelar</button> <button class="btn btn-success">Comprar</button></td></tr></tfoot></table>';

    ShoppingCart.prototype.addTo = function(elJq) {
      var scope;
      scope = this;
      this.jq = $(this.html).appendTo(elJq);
      this.tBodyJq = $('tbody', this.jq);
      this.totalJq = $('td#tolal', this.jq);
      this.tBodyJq.on('click', 'button', function(e) {
        if ($(this).attr('alt') === 'eliminar') {
          return scope.delRow($(this).parent().parent());
        } else {
          return scope.editRow($(this).parent().parent());
        }
      });
      return $('tfoot', this.jq).on('click', 'button', function(e) {
        if ($(this).attr('class') === 'btn btn-danger') {
          return scope.cancelShopp();
        } else {
          return scope.shopp();
        }
      });
    };

    ShoppingCart.prototype.shopp = function() {
      var modalProveedor;
      modalProveedor = new Modal({
        titulo: 'Proveedor',
        tipo: 'formulario',
        contenido: htmlProveedor,
        despuesDeMostrar: function(ModalJq) {
          return setTimeout(function() {
            return ModalJq.find('input:text:first').focus();
          }, 500);
        },
        antesDeMostrar: function(ModalJq) {
          return ModalJq.find('div.modal-footer button:first').text('ok');
        }
      });
      return new Validador({
        formulario: modalProveedor.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formJq) {
            return modalProveedor.cerrar(function() {
              var proveedor, _j, _len1, _ref;
              proveedor = formJq.find('input:text').val();
              _ref = _this.itemsInCart;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                item = _ref[_j];
                item.proveedor = proveedor;
              }
              io.emit('compras:shopp', {
                compras: _this.itemsInCart,
                userAction: globalUser
              });
              return io.emit('compras:shopping', {
                userAction: globalUser
              });
            });
          };
        })(this)
      });
    };

    ShoppingCart.prototype.restar = function() {
      this.itemsInCart = [];
      this.numRows = 0;
      this.numItems = 0;
      numItemsJq.text(this.numItems);
      this.tBodyJq.html('');
      this.jq.hide();
      return msgCarritoJq.show();
    };

    ShoppingCart.prototype.cancelShopp = function() {
      var modalConfirm;
      return modalConfirm = new Modal({
        titulo: 'Confirmar - Cancelar Compra',
        tipo: 'confirmacion',
        contenido: "<p>Realmente desea cancelar esta compra?</p>",
        accionSi: (function(_this) {
          return function() {
            return modalConfirm.cerrar(function() {
              _this.itemsInCart = [];
              _this.numRows = 0;
              _this.numItems = 0;
              numItemsJq.text(_this.numItems);
              _this.tBodyJq.html('');
              return _this.jq.fadeOut('fast', function() {
                return msgCarritoJq.fadeIn('fast');
              });
            });
          };
        })(this),
        antesDeMostrar: function(jqModal) {
          var btnsi;
          btnsi = jqModal.find('button.btn-danger').text('SI');
          return jqModal.find('button:last').text('NO').click(function(e) {
            return modalConfirm.cerrar();
          });
        }
      });
    };

    ShoppingCart.prototype.sumColumn = function(index) {
      var sum;
      sum = 0;
      this.tBodyJq.find('tr').each(function(i) {
        var valTd;
        valTd = $(this).find("td:eq(" + index + ")").text() * 1;
        return sum += valTd;
      });
      return sum;
    };

    ShoppingCart.prototype.editRow = function(trJq) {
      var dtsJq, modalEditar;
      dtsJq = trJq.find('td');
      modalEditar = new Modal({
        titulo: 'Editar - Item (Compra)',
        tipo: 'formulario',
        contenido: formHtmlEditarItem,
        despuesDeMostrar: function(modalJq) {
          var elJq, elTdVal, i, _j, _len1;
          for (i = _j = 0, _len1 = AuxObjAttribs.length; _j < _len1; i = ++_j) {
            item = AuxObjAttribs[i];
            if (!(item !== 'subtotal')) {
              continue;
            }
            elTdVal = $(dtsJq[i]).text();
            elJq = $("input#" + item, modalJq);
            elJq.val(elTdVal);
            if (elTdVal === '----------') {
              elJq.attr('disabled', 'disabled');
            }
          }
          return setTimeout(function() {
            return modalJq.find('input:text:first').select();
          }, 500);
        },
        antesDeMostrar: function(modalJq) {
          return modalJq.find('div.modal-footer button:first').text('ok');
        }
      });
      return new Validador({
        formulario: modalEditar.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formJq) {
            var cantidad, seriesArr, seriesJq;
            cantidad = $('input#cantidad', formJq).val();
            seriesJq = $('input#series', formJq);
            seriesArr = seriesJq.val().split(',');
            if (cantidad * 1 === seriesArr.length * 1 || seriesJq.val() === '----------') {
              return modalEditar.cerrar(function() {
                var elTdJq, elVal, i, _j, _len1;
                for (i = _j = 0, _len1 = AuxObjAttribs.length; _j < _len1; i = ++_j) {
                  item = AuxObjAttribs[i];
                  elTdJq = $(dtsJq[i]);
                  elVal = $("input#" + item, formJq).val();
                  elTdJq.text(elVal);
                  if (item === 'subtotal') {
                    elTdJq.text($(dtsJq[3]).text() * 1 * $(dtsJq[4]).text());
                  }
                }
                _this.totalJq.text(_this.sumColumn(7));
                _this.numItems = _this.sumColumn(4);
                return numItemsJq.text(_this.numItems);
              });
            } else {
              return new Alerta({
                tipo: 'error',
                titulo: 'Error',
                texto: "debe escribir " + cantidad + " serie(s)",
                posicion: 'arriba-izquierda'
              });
            }
          };
        })(this)
      });
    };

    ShoppingCart.prototype.addRow = function(rowObj) {
      var attr, htmlRow, _j, _len1, _ref;
      this.numRows++;
      this.numItems += rowObj.cantidad * 1;
      numItemsJq.text(this.numItems);
      htmlRow = '<tr>';
      _ref = this.objAttribs;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        attr = _ref[_j];
        htmlRow += "<td>" + rowObj[attr] + "</td>";
      }
      htmlRow += '<td><button type="button" class="btn btn-danger btn-circle" alt="eliminar"><i class="fa fa-times"></i></button> <button type="button" class="btn btn-info btn-circle" alt="editar"><i class="fa fa-pencil"></i></button></td>';
      htmlRow += '</tr>';
      $(htmlRow).appendTo(this.tBodyJq);
      this.totalJq.text(this.sumColumn(7));
      if (this.numRows === 1) {
        msgCarritoJq.hide();
        this.jq.show();
      }
      delete rowObj.subtotal;
      return this.itemsInCart.push(rowObj);
    };

    ShoppingCart.prototype.delRow = function(rowJq) {
      var cantidad;
      cantidad = rowJq.find('td:eq(4)').text();
      this.numRows--;
      this.numItems -= cantidad * 1;
      numItemsJq.text(this.numItems);
      return rowJq.fadeOut('medium', (function(_this) {
        return function() {
          rowJq.remove();
          if (_this.numRows === 0) {
            _this.jq.hide();
            return msgCarritoJq.show();
          }
        };
      })(this));
    };

    ShoppingCart.prototype.serialize = function(proveedor) {
      var gthis, resultArr;
      resultArr = [];
      gthis = this;
      this.tBodyJq.find('tr').each(function(i) {
        var attr, inx, objEl, tds, _j, _len1, _ref;
        tds = $(this).find('td');
        objEl = {};
        _ref = gthis.objAttribs;
        for (inx = _j = 0, _len1 = _ref.length; _j < _len1; inx = ++_j) {
          attr = _ref[inx];
          if (attr !== 'subtotal') {
            objEl[attr] = $(tds[inx]).text();
          }
        }
        objEl.proveedor = proveedor;
        return resultArr.push(objEl);
      });
      return resultArr;
    };

    return ShoppingCart;

  })();

  $(document).ready(function() {
    var actualNum, btnClearJq, btnSearchJq, btnsTabs, cantidadJq, carouselItem, contTablaCompJq, ctnsTabs, formCompraJq, imputsFormCompraJq, inputSearchJq, itemElegido, procAddToCard, procSeries, serializeForm, shoppingCart, showHideMenujq, tablaCompras, tablaComprasJq, titlePanelJq, valArray, validador;
    io.on('compras:shopp', function(data) {
      tablaCompras.ajax.reload();
      if (data.userAction === globalUser) {
        shoppingCart.restar();
        return new Alerta(data.msg);
      }
    });
    tablaComprasJq = $('#productos-registrados');
    contTablaCompJq = tablaComprasJq.parent();
    tablaCompras = tablaComprasJq.DataTable({
      "dom": '<"top"fl>t<"bottom"pi><"clear">',
      "language": {
        "search": "Buscar: ",
        "lengthMenu": "",
        "lengthMenu": "_MENU_",
        "zeroRecords": "Ningun registro encontrado",
        "info": "pagina _PAGE_ de _PAGES_",
        "infoEmpty": "Ningun Registro",
        "infoFiltered": "(fitrado de _MAX_ total registros)"
      },
      "ajax": '/compras/prodReg',
      "columns": [
        {
          "data": "docdata._id"
        }, {
          "data": "docdata.fecha"
        }, {
          "data": "docdata.serie"
        }, {
          "data": "docdata.codigo"
        }, {
          "data": "docdata.descripcion"
        }, {
          "data": "docdata.costo"
        }, {
          "data": "docdata.cantidad"
        }, {
          "data": "docdata.utilidad"
        }, {
          "data": "docdata.garantia"
        }, {
          "data": "docdata.proveedor"
        }
      ],
      "columnDefs": [
        {
          "visible": false,
          "targets": 0
        }, {
          "targets": 1,
          "visible": false,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).text(moment(cellData).format("DD-MM-YYYY H:mm:ss"));
          }
        }, {
          "visible": false,
          "targets": 2
        }, {
          "targets": 3,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "targets": 4,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "visible": false,
          "targets": 5
        }, {
          "visible": false,
          "targets": 6
        }, {
          "visible": false,
          "targets": 7
        }, {
          "visible": false,
          "targets": 8
        }, {
          "visible": false,
          "targets": 9
        }
      ],
      "order": [1, 'desc']
    });
    showHideMenujq = $('div.show-hide-colms');
    $(document).ajaxComplete(function(event, xhr, settings) {
      tablaComprasJq.css('width', '');
      return showHideMenujq.show();
    });
    $('ul.dropdown-cols input:checkbox').on('click', function(event) {
      var column;
      column = tablaCompras.column($(this).attr('data-column'));
      if ($(this).is(':checked')) {
        column.visible(true);
      } else {
        column.visible(false);
      }
      return tablaComprasJq.css('width', '');
    });
    btnsTabs = $('button.btns-tabs');
    ctnsTabs = $('div.tab-pane');
    btnsTabs.on('click', function(evt) {
      var elJq;
      elJq = $(this);
      btnsTabs.removeClass('active');
      elJq.addClass('active');
      ctnsTabs.hide();
      return $('div#' + elJq.attr('name')).show();
    });
    actualNum = 0;
    carouselItem = $('div#item-compra').carousel({
      interval: false
    });
    $('ol.breadcrumb').on('click', 'a', function(evt) {
      var num;
      evt.preventDefault();
      num = $(this).attr('data-target') * 1;
      if (actualNum !== num) {
        carouselItem.carousel(num);
        return actualNum = num;
      }
    });
    carouselItem.on('slid.bs.carousel', function(e) {
      if (inputSearchJq.is(':visible')) {
        return inputSearchJq.focus();
      }
    });
    cantidadJq = $("input#cantidad");
    valArray = {
      codigo: $('input#codigo'),
      descripcion: $('textarea#descripcion'),
      costo: $('input#costo'),
      utilidad: $('input#utilidad'),
      garantia: $('input#garantia')
    };
    titlePanelJq = $('span#title-panel');
    itemElegido = {};
    $('tbody', tablaComprasJq).on('click', 'a', function(evt) {
      var data, indexElegido;
      evt.preventDefault();
      showHideMenujq.hide();
      indexElegido = tablaCompras.row($(this).parents('tr')[0]).index();
      data = tablaCompras.row(indexElegido).data();
      itemElegido = data.docdata;
      console.log(data);
      return contTablaCompJq.fadeOut('fast', function() {
        titlePanelJq.html('<strong>(Agregue al carrito)</strong>');
        return contTablaCompJq.next().fadeIn('fast', function() {
          var jq, prop;
          for (prop in valArray) {
            jq = valArray[prop];
            jq.val(data.docdata[prop]);
          }
          return valArray.costo.select();
        });
      });
    });
    inputSearchJq = $('input.input-sm', contTablaCompJq);
    formCompraJq = $('form#nueva-compra');
    imputsFormCompraJq = $('input:text, textarea', formCompraJq);
    btnSearchJq = $('button#btn-search-form').on('click', function(evt) {
      showHideMenujq.show();
      validador.ocultarMensajes();
      cantidadJq.val('');
      return contTablaCompJq.next().fadeOut('fast', function() {
        if (inputSearchJq.val() !== '') {
          inputSearchJq.val('');
          inputSearchJq.trigger('keyup');
        }
        titlePanelJq.html('Productos Registrados <strong>(Elija Uno)</strong> / o uno <a href="javascript:;">Nuevo</a>');
        return contTablaCompJq.fadeIn('fast', function() {
          return inputSearchJq.focus();
        });
      });
    });
    $(titlePanelJq).on('click', 'a', function(e) {
      return contTablaCompJq.fadeOut('fast', function() {
        titlePanelJq.html('<strong>(Agregue al carrito)</strong>');
        btnClearJq.trigger('click');
        return contTablaCompJq.next().fadeIn('fast', function() {
          return valArray.codigo.focus();
        });
      });
    });
    btnClearJq = $('button#btn-clear-form').on('click', function(evt) {
      imputsFormCompraJq.val('');
      validador.ocultarMensajes();
      itemElegido = {};
      return valArray.codigo.focus();
    });
    serializeForm = function(formJq) {
      var objResult;
      objResult = {};
      $('input:text, textarea', formJq).each(function(k) {
        var elJq;
        elJq = $(this);
        return objResult[elJq.attr('id')] = elJq.val();
      });
      return objResult;
    };
    procAddToCard = function(series) {
      var rowObj;
      if (series == null) {
        series = false;
      }
      rowObj = serializeForm(formCompraJq);
      rowObj.subtotal = rowObj.cantidad * rowObj.costo;
      if (series) {
        rowObj.series = series;
      } else {
        rowObj.series = '----------';
      }
      console.log(rowObj);
      shoppingCart.addRow(rowObj);
      btnSearchJq.trigger('click');
      return new Alerta({
        tipo: 'info',
        titulo: 'Item(s) Agregado',
        texto: "" + rowObj.cantidad + " item(s) agregados al carrito",
        posicion: 'arriba-izquierda'
      });
    };
    procSeries = function() {
      var cantidad, htmlSeries, i, modalSeries, _j;
      cantidad = cantidadJq.val() * 1;
      htmlSeries = '<form class="form-horizontal">';
      for (i = _j = 0; 0 <= cantidad ? _j < cantidad : _j > cantidad; i = 0 <= cantidad ? ++_j : --_j) {
        htmlSeries += "<div class='form-group'> <label for='serie" + (i + 1) + "' class='col-md-3  control-label'>Serie" + (i + 1) + ":</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='serie" + (i + 1) + "' name='serie" + (i + 1) + "' placeholder='Serie del producto' validar='requiere'> </div> </div>";
      }
      htmlSeries += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';
      modalSeries = new Modal({
        titulo: 'Series',
        tipo: 'formulario',
        contenido: htmlSeries,
        despuesDeMostrar: function(ModalJq) {
          return setTimeout(function() {
            return ModalJq.find('input:text:first').focus();
          }, 500);
        },
        antesDeMostrar: function(ModalJq) {
          return ModalJq.find('div.modal-footer button:first').text('ok');
        }
      });
      return new Validador({
        formulario: modalSeries.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formSeriesJq) {
            return modalSeries.cerrar(function() {
              var series;
              series = '';
              formSeriesJq.find('input:text:not(:last)').each(function(k) {
                return series += "" + ($(this).val()) + ", ";
              });
              series += formSeriesJq.find('input:text:last').val();
              return procAddToCard(series);
            });
          };
        })(this)
      });
    };
    validador = new Validador({
      formulario: formCompraJq,
      procesarFormulario: function(formJq) {
        var modalConfirm, prod;
        prod = itemElegido;
        if (!prod.serie) {
          return modalConfirm = new Modal({
            titulo: 'Producto Nuevo',
            tipo: 'confirmacion',
            contenido: "<p>! El Producto con codigo <strong>" + (valArray.codigo.val()) + "</strong> es un nuevo producto</p><br> <p>Posee serie?</p>",
            accionSi: function() {
              return modalConfirm.cerrar(function() {
                return procSeries();
              });
            },
            antesDeMostrar: function(jqModal) {
              var btnsi;
              btnsi = jqModal.find('button.btn-danger').text('SI');
              jqModal.find('button:last').text('NO').click(function(e) {
                return procAddToCard();
              });
              return setTimeout(function() {
                return btnsi.focus();
              }, 500);
            },
            despuesDeCerrar: function(jqModal) {}
          });
        } else if (prod.serie !== '----------') {
          return procSeries();
        } else {
          return procAddToCard();
        }
      }
    });
    shoppingCart = new ShoppingCart();
    return shoppingCart.addTo($('div.table-responsive:eq(1)'));
  });

}).call(this);
